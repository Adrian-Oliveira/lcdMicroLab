
PORG_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  000006ee  00000782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .eeprom       00000004  00810000  00810000  000007ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d53  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000440  00000000  00000000  00001663  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a4  00000000  00000000  00001aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00002348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ae  00000000  00000000  0000250c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c65  00000000  00000000  000027ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000341f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	42 c3       	rjmp	.+1668   	; 0x688 <__vector_1>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__trampolines_end>:
  2a:	31 32       	cpi	r19, 0x21	; 33
  2c:	33 41       	sbci	r19, 0x13	; 19
  2e:	34 35       	cpi	r19, 0x54	; 84
  30:	36 42       	sbci	r19, 0x26	; 38
  32:	37 38       	cpi	r19, 0x87	; 135
  34:	39 43       	sbci	r19, 0x39	; 57
  36:	46 30       	cpi	r20, 0x06	; 6
  38:	45 44       	sbci	r20, 0x45	; 69

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d2 e0       	ldi	r29, 0x02	; 2
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	ee ee       	ldi	r30, 0xEE	; 238
  4e:	f6 e0       	ldi	r31, 0x06	; 6
  50:	02 c0       	rjmp	.+4      	; 0x56 <__do_copy_data+0x10>
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0
  56:	aa 3c       	cpi	r26, 0xCA	; 202
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <__do_copy_data+0xc>
  5c:	a7 d0       	rcall	.+334    	; 0x1ac <main>
  5e:	45 c3       	rjmp	.+1674   	; 0x6ea <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  62:	de 9a       	sbi	0x1b, 6	; 27
  64:	00 00       	nop
  66:	de 98       	cbi	0x1b, 6	; 27
  68:	08 95       	ret

0000006a <lcd_write>:
  6a:	cf 93       	push	r28
  6c:	df 93       	push	r29
  6e:	d8 2f       	mov	r29, r24
  70:	66 23       	and	r22, r22
  72:	11 f0       	breq	.+4      	; 0x78 <lcd_write+0xe>
  74:	dc 9a       	sbi	0x1b, 4	; 27
  76:	01 c0       	rjmp	.+2      	; 0x7a <lcd_write+0x10>
  78:	dc 98       	cbi	0x1b, 4	; 27
  7a:	dd 98       	cbi	0x1b, 5	; 27
  7c:	8a b3       	in	r24, 0x1a	; 26
  7e:	8f 60       	ori	r24, 0x0F	; 15
  80:	8a bb       	out	0x1a, r24	; 26
  82:	cb b3       	in	r28, 0x1b	; 27
  84:	c0 7f       	andi	r28, 0xF0	; 240
  86:	8d 2f       	mov	r24, r29
  88:	82 95       	swap	r24
  8a:	8f 70       	andi	r24, 0x0F	; 15
  8c:	8c 2b       	or	r24, r28
  8e:	8b bb       	out	0x1b, r24	; 27
  90:	e8 df       	rcall	.-48     	; 0x62 <toggle_e>
  92:	df 70       	andi	r29, 0x0F	; 15
  94:	dc 2b       	or	r29, r28
  96:	db bb       	out	0x1b, r29	; 27
  98:	e4 df       	rcall	.-56     	; 0x62 <toggle_e>
  9a:	cf 60       	ori	r28, 0x0F	; 15
  9c:	cb bb       	out	0x1b, r28	; 27
  9e:	df 91       	pop	r29
  a0:	cf 91       	pop	r28
  a2:	08 95       	ret

000000a4 <lcd_read>:
  a4:	88 23       	and	r24, r24
  a6:	11 f0       	breq	.+4      	; 0xac <lcd_read+0x8>
  a8:	dc 9a       	sbi	0x1b, 4	; 27
  aa:	01 c0       	rjmp	.+2      	; 0xae <lcd_read+0xa>
  ac:	dc 98       	cbi	0x1b, 4	; 27
  ae:	dd 9a       	sbi	0x1b, 5	; 27
  b0:	8a b3       	in	r24, 0x1a	; 26
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	8a bb       	out	0x1a, r24	; 26
  b6:	de 9a       	sbi	0x1b, 6	; 27
  b8:	00 00       	nop
  ba:	29 b3       	in	r18, 0x19	; 25
  bc:	de 98       	cbi	0x1b, 6	; 27
  be:	00 00       	nop
  c0:	de 9a       	sbi	0x1b, 6	; 27
  c2:	00 00       	nop
  c4:	99 b3       	in	r25, 0x19	; 25
  c6:	22 95       	swap	r18
  c8:	20 7f       	andi	r18, 0xF0	; 240
  ca:	89 2f       	mov	r24, r25
  cc:	8f 70       	andi	r24, 0x0F	; 15
  ce:	de 98       	cbi	0x1b, 6	; 27
  d0:	82 2b       	or	r24, r18
  d2:	08 95       	ret

000000d4 <lcd_waitbusy>:
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	e6 df       	rcall	.-52     	; 0xa4 <lcd_read>
  d8:	88 23       	and	r24, r24
  da:	e4 f3       	brlt	.-8      	; 0xd4 <lcd_waitbusy>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_waitbusy+0xa>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_waitbusy+0xc>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	e0 df       	rcall	.-64     	; 0xa4 <lcd_read>
  e4:	08 95       	ret

000000e6 <lcd_command>:
  e6:	cf 93       	push	r28
  e8:	c8 2f       	mov	r28, r24
  ea:	f4 df       	rcall	.-24     	; 0xd4 <lcd_waitbusy>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8c 2f       	mov	r24, r28
  f0:	bc df       	rcall	.-136    	; 0x6a <lcd_write>
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <lcd_gotoxy>:
  f6:	61 11       	cpse	r22, r1
  f8:	03 c0       	rjmp	.+6      	; 0x100 <lcd_gotoxy+0xa>
  fa:	80 58       	subi	r24, 0x80	; 128
  fc:	f4 df       	rcall	.-24     	; 0xe6 <lcd_command>
  fe:	08 95       	ret
 100:	80 54       	subi	r24, 0x40	; 64
 102:	f1 df       	rcall	.-30     	; 0xe6 <lcd_command>
 104:	08 95       	ret

00000106 <lcd_clrscr>:
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	ee df       	rcall	.-36     	; 0xe6 <lcd_command>
 10a:	08 95       	ret

0000010c <lcd_putc>:
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
 110:	e1 df       	rcall	.-62     	; 0xd4 <lcd_waitbusy>
 112:	ca 30       	cpi	r28, 0x0A	; 10
 114:	41 f4       	brne	.+16     	; 0x126 <lcd_putc+0x1a>
 116:	80 34       	cpi	r24, 0x40	; 64
 118:	10 f0       	brcs	.+4      	; 0x11e <lcd_putc+0x12>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	01 c0       	rjmp	.+2      	; 0x120 <lcd_putc+0x14>
 11e:	80 e4       	ldi	r24, 0x40	; 64
 120:	80 58       	subi	r24, 0x80	; 128
 122:	e1 df       	rcall	.-62     	; 0xe6 <lcd_command>
 124:	03 c0       	rjmp	.+6      	; 0x12c <lcd_putc+0x20>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	8c 2f       	mov	r24, r28
 12a:	9f df       	rcall	.-194    	; 0x6a <lcd_write>
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <lcd_puts>:
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ec 01       	movw	r28, r24
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	fc 01       	movw	r30, r24
 13a:	80 81       	ld	r24, Z
 13c:	88 23       	and	r24, r24
 13e:	21 f0       	breq	.+8      	; 0x148 <lcd_puts+0x18>
 140:	e5 df       	rcall	.-54     	; 0x10c <lcd_putc>
 142:	89 91       	ld	r24, Y+
 144:	81 11       	cpse	r24, r1
 146:	fc cf       	rjmp	.-8      	; 0x140 <lcd_puts+0x10>
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 14e:	cf 93       	push	r28
 150:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 152:	9a b3       	in	r25, 0x1a	; 26
 154:	9f 67       	ori	r25, 0x7F	; 127
 156:	9a bb       	out	0x1a, r25	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	8f e9       	ldi	r24, 0x9F	; 159
 15a:	9f e0       	ldi	r25, 0x0F	; 15
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_init+0xe>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_init+0x14>
 162:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 164:	d9 9a       	sbi	0x1b, 1	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 166:	d8 9a       	sbi	0x1b, 0	; 27
    lcd_e_toggle();
 168:	7c df       	rcall	.-264    	; 0x62 <toggle_e>
 16a:	81 ee       	ldi	r24, 0xE1	; 225
 16c:	94 e0       	ldi	r25, 0x04	; 4
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_init+0x20>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_init+0x26>
 174:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 176:	75 df       	rcall	.-278    	; 0x62 <toggle_e>
 178:	95 e1       	ldi	r25, 0x15	; 21
 17a:	9a 95       	dec	r25
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_init+0x2c>
 17e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 180:	70 df       	rcall	.-288    	; 0x62 <toggle_e>
 182:	85 e1       	ldi	r24, 0x15	; 21
 184:	8a 95       	dec	r24
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0x36>
 188:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 18a:	d8 98       	cbi	0x1b, 0	; 27
    lcd_e_toggle();
 18c:	6a df       	rcall	.-300    	; 0x62 <toggle_e>
 18e:	95 e1       	ldi	r25, 0x15	; 21
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_init+0x42>
 194:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 196:	88 e2       	ldi	r24, 0x28	; 40
 198:	a6 df       	rcall	.-180    	; 0xe6 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 19a:	88 e0       	ldi	r24, 0x08	; 8
 19c:	a4 df       	rcall	.-184    	; 0xe6 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 19e:	b3 df       	rcall	.-154    	; 0x106 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	a1 df       	rcall	.-190    	; 0xe6 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1a4:	8c 2f       	mov	r24, r28
 1a6:	9f df       	rcall	.-194    	; 0xe6 <lcd_command>

}/* lcd_init */
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <main>:

const unsigned char USER3[6] PROGMEM ={'C','D','F','3','4','5'};


int main(void)
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	2f 97       	sbiw	r28, 0x0f	; 15
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
	
    /* Replace with your application code */
	lcd_init(LCD_DISP_ON_CURSOR); 
 1c0:	8e e0       	ldi	r24, 0x0E	; 14
 1c2:	c5 df       	rcall	.-118    	; 0x14e <lcd_init>
 
	DDRD=0x00;
 1c4:	11 ba       	out	0x11, r1	; 17
	PORTD=0xFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	82 bb       	out	0x12, r24	; 18
	
	DDRC=0xFF;
 1ca:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
 1cc:	15 ba       	out	0x15, r1	; 21
	
	DDRB=0x0F;
 1ce:	9f e0       	ldi	r25, 0x0F	; 15
 1d0:	97 bb       	out	0x17, r25	; 23
	PORTB=0xFF;
 1d2:	88 bb       	out	0x18, r24	; 24
	                            
	MCUCR = 0x00;
 1d4:	15 be       	out	0x35, r1	; 53
	
	GICR = (1<<INT0);
 1d6:	80 e4       	ldi	r24, 0x40	; 64
 1d8:	8b bf       	out	0x3b, r24	; 59
	sei();
 1da:	78 94       	sei
	
	unsigned char l,t='r',i,j,s[3]={'r','r','r'},f='0',fl='0',sh[3]={'s','s','s'};
 1dc:	23 e7       	ldi	r18, 0x73	; 115
 1de:	2b 87       	std	Y+11, r18	; 0x0b
 1e0:	33 e7       	ldi	r19, 0x73	; 115
 1e2:	3c 87       	std	Y+12, r19	; 0x0c
 1e4:	63 e7       	ldi	r22, 0x73	; 115
 1e6:	6a 87       	std	Y+10, r22	; 0x0a
			{
				for(j=0;j<4;j++)
				{
				
				
					clr_bit(PORTB,j);
 1e8:	44 24       	eor	r4, r4
 1ea:	43 94       	inc	r4
 1ec:	51 2c       	mov	r5, r1
						l=i+4;
						if(!tst_bit(PINB,l))
						{
							t = pgm_read_byte(&teclado[i][j]);
							lcd_putc(t);
							if ((t!='r')&(s[0]=='r')){
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	8d 87       	std	Y+13, r24	; 0x0d
 1f2:	22 24       	eor	r2, r2
 1f4:	23 94       	inc	r2
while(1)
{
	s[0]='r';
	s[1]='r';
	s[2]='r';
	f='0';
 1f6:	18 86       	std	Y+8, r1	; 0x08
 1f8:	19 86       	std	Y+9, r1	; 0x09
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	9d 83       	std	Y+5, r25	; 0x05
 1fe:	1e 82       	std	Y+6, r1	; 0x06
	
	
while(1)
{
	s[0]='r';
	s[1]='r';
 200:	02 e7       	ldi	r16, 0x72	; 114
	s[2]='r';
 202:	0f 2e       	mov	r0, r31
 204:	f2 e7       	ldi	r31, 0x72	; 114
 206:	9f 2e       	mov	r9, r31
 208:	f0 2d       	mov	r31, r0
	
	
	
while(1)
{
	s[0]='r';
 20a:	0f 2e       	mov	r0, r31
 20c:	f2 e7       	ldi	r31, 0x72	; 114
 20e:	6f 2e       	mov	r6, r31
 210:	f0 2d       	mov	r31, r0
	s[1]='r';
	s[2]='r';
	f='0';
 212:	e0 e3       	ldi	r30, 0x30	; 48
 214:	ef 83       	std	Y+7, r30	; 0x07
	fl='0';
	while (fl=='0') 
	{
	
		
		lcd_puts("Login:");
 216:	80 e6       	ldi	r24, 0x60	; 96
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	8a df       	rcall	.-236    	; 0x130 <lcd_puts>
		
		
		
		
		
	while (f=='0')
 21c:	ff 81       	ldd	r31, Y+7	; 0x07
 21e:	f0 33       	cpi	r31, 0x30	; 48
 220:	09 f4       	brne	.+2      	; 0x224 <main+0x78>
 222:	be c0       	rjmp	.+380    	; 0x3a0 <__stack+0x141>
 224:	bf 2e       	mov	r11, r31
 226:	c7 c0       	rjmp	.+398    	; 0x3b6 <__stack+0x157>
			{
				for(j=0;j<4;j++)
				{
				
				
					clr_bit(PORTB,j);
 228:	88 b3       	in	r24, 0x18	; 24
 22a:	92 01       	movw	r18, r4
 22c:	00 2e       	mov	r0, r16
 22e:	02 c0       	rjmp	.+4      	; 0x234 <main+0x88>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <main+0x84>
 238:	3a 83       	std	Y+2, r19	; 0x02
 23a:	29 83       	std	Y+1, r18	; 0x01
 23c:	92 2f       	mov	r25, r18
 23e:	90 95       	com	r25
 240:	89 23       	and	r24, r25
 242:	88 bb       	out	0x18, r24	; 24
 244:	83 ec       	ldi	r24, 0xC3	; 195
 246:	99 e0       	ldi	r25, 0x09	; 9
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <main+0x9c>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0xa2>
 24e:	00 00       	nop
 250:	f8 01       	movw	r30, r16
 252:	e6 5d       	subi	r30, 0xD6	; 214
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	6f 01       	movw	r12, r30
 258:	98 01       	movw	r18, r16
 25a:	26 5c       	subi	r18, 0xC6	; 198
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	79 01       	movw	r14, r18
 260:	3d 81       	ldd	r19, Y+5	; 0x05
 262:	3b 83       	std	Y+3, r19	; 0x03
 264:	6e 81       	ldd	r22, Y+6	; 0x06
 266:	6c 83       	std	Y+4, r22	; 0x04
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	9c 81       	ldd	r25, Y+4	; 0x04
 26c:	9f 87       	std	Y+15, r25	; 0x0f
 26e:	8e 87       	std	Y+14, r24	; 0x0e
 270:	1c 83       	std	Y+4, r17	; 0x04
 272:	0b 83       	std	Y+3, r16	; 0x03
					_delay_ms(10);
					for(i=0;i<4;i++)
					{
						l=i+4;
						if(!tst_bit(PINB,l))
 274:	86 b3       	in	r24, 0x16	; 22
 276:	ae 84       	ldd	r10, Y+14	; 0x0e
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0a 2c       	mov	r0, r10
 27c:	02 c0       	rjmp	.+4      	; 0x282 <__stack+0x23>
 27e:	95 95       	asr	r25
 280:	87 95       	ror	r24
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <__stack+0x1f>
 286:	80 fd       	sbrc	r24, 0
 288:	6d c0       	rjmp	.+218    	; 0x364 <__stack+0x105>
						{
							t = pgm_read_byte(&teclado[i][j]);
 28a:	f6 01       	movw	r30, r12
 28c:	14 91       	lpm	r17, Z
							lcd_putc(t);
 28e:	81 2f       	mov	r24, r17
 290:	3d df       	rcall	.-390    	; 0x10c <lcd_putc>
							if ((t!='r')&(s[0]=='r')){
 292:	82 2d       	mov	r24, r2
 294:	12 37       	cpi	r17, 0x72	; 114
 296:	09 f4       	brne	.+2      	; 0x29a <__stack+0x3b>
 298:	87 2d       	mov	r24, r7
 29a:	88 23       	and	r24, r24
 29c:	41 f0       	breq	.+16     	; 0x2ae <__stack+0x4f>
 29e:	82 2d       	mov	r24, r2
 2a0:	f2 e7       	ldi	r31, 0x72	; 114
 2a2:	6f 12       	cpse	r6, r31
 2a4:	87 2d       	mov	r24, r7
 2a6:	88 23       	and	r24, r24
 2a8:	11 f0       	breq	.+4      	; 0x2ae <__stack+0x4f>
								s[0]=t;
 2aa:	61 2e       	mov	r6, r17
								t='r';
 2ac:	18 2d       	mov	r17, r8
 2ae:	c2 01       	movw	r24, r4
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__stack+0x57>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	aa 94       	dec	r10
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <__stack+0x53>
 2ba:	4e 85       	ldd	r20, Y+14	; 0x0e
 2bc:	5f 85       	ldd	r21, Y+15	; 0x0f
								}
							while(!tst_bit(PINB,l));
 2be:	26 b3       	in	r18, 0x16	; 22
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	28 23       	and	r18, r24
 2c4:	39 23       	and	r19, r25
 2c6:	23 2b       	or	r18, r19
 2c8:	d1 f3       	breq	.-12     	; 0x2be <__stack+0x5f>
 2ca:	5f 87       	std	Y+15, r21	; 0x0f
 2cc:	4e 87       	std	Y+14, r20	; 0x0e
							if ((t!='r')&(s[0]!='r')&(s[1]=='r')&(s[2]=='r')){
 2ce:	52 2d       	mov	r21, r2
 2d0:	22 e7       	ldi	r18, 0x72	; 114
 2d2:	62 12       	cpse	r6, r18
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <__stack+0x79>
 2d6:	57 2d       	mov	r21, r7
 2d8:	42 2d       	mov	r20, r2
 2da:	32 e7       	ldi	r19, 0x72	; 114
 2dc:	93 12       	cpse	r9, r19
 2de:	47 2d       	mov	r20, r7
 2e0:	22 2d       	mov	r18, r2
 2e2:	62 e7       	ldi	r22, 0x72	; 114
 2e4:	36 12       	cpse	r3, r22
 2e6:	27 2d       	mov	r18, r7
 2e8:	24 23       	and	r18, r20
 2ea:	32 2d       	mov	r19, r2
 2ec:	12 37       	cpi	r17, 0x72	; 114
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <__stack+0x93>
 2f0:	37 2d       	mov	r19, r7
 2f2:	23 23       	and	r18, r19
 2f4:	39 f0       	breq	.+14     	; 0x304 <__stack+0xa5>
 2f6:	55 23       	and	r21, r21
 2f8:	41 f0       	breq	.+16     	; 0x30a <__stack+0xab>
								s[1]=t;
 2fa:	31 2e       	mov	r3, r17
								t='r';
 2fc:	18 2d       	mov	r17, r8
 2fe:	6e 85       	ldd	r22, Y+14	; 0x0e
 300:	7f 85       	ldd	r23, Y+15	; 0x0f
 302:	05 c0       	rjmp	.+10     	; 0x30e <__stack+0xaf>
 304:	6e 85       	ldd	r22, Y+14	; 0x0e
 306:	7f 85       	ldd	r23, Y+15	; 0x0f
 308:	02 c0       	rjmp	.+4      	; 0x30e <__stack+0xaf>
 30a:	6e 85       	ldd	r22, Y+14	; 0x0e
 30c:	7f 85       	ldd	r23, Y+15	; 0x0f
								}
							while(!tst_bit(PINB,l));
 30e:	26 b3       	in	r18, 0x16	; 22
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	28 23       	and	r18, r24
 314:	39 23       	and	r19, r25
 316:	23 2b       	or	r18, r19
 318:	d1 f3       	breq	.-12     	; 0x30e <__stack+0xaf>
 31a:	7f 87       	std	Y+15, r23	; 0x0f
 31c:	6e 87       	std	Y+14, r22	; 0x0e
 31e:	45 23       	and	r20, r21
							if ((t!='r')&(s[0]!='r')&(s[1]!='r')&(s[2]=='r'))
 320:	22 2d       	mov	r18, r2
 322:	12 37       	cpi	r17, 0x72	; 114
 324:	09 f4       	brne	.+2      	; 0x328 <__stack+0xc9>
 326:	27 2d       	mov	r18, r7
 328:	42 23       	and	r20, r18
 32a:	79 f0       	breq	.+30     	; 0x34a <__stack+0xeb>
 32c:	22 2d       	mov	r18, r2
 32e:	e2 e7       	ldi	r30, 0x72	; 114
 330:	3e 12       	cpse	r3, r30
 332:	01 c0       	rjmp	.+2      	; 0x336 <__stack+0xd7>
 334:	27 2d       	mov	r18, r7
 336:	22 23       	and	r18, r18
 338:	59 f0       	breq	.+22     	; 0x350 <__stack+0xf1>
								{
									s[2]=t;
 33a:	91 2e       	mov	r9, r17
									f='1';
 33c:	0f 2e       	mov	r0, r31
 33e:	f1 e3       	ldi	r31, 0x31	; 49
 340:	bf 2e       	mov	r11, r31
 342:	f0 2d       	mov	r31, r0
 344:	4e 85       	ldd	r20, Y+14	; 0x0e
 346:	5f 85       	ldd	r21, Y+15	; 0x0f
 348:	05 c0       	rjmp	.+10     	; 0x354 <__stack+0xf5>
 34a:	4e 85       	ldd	r20, Y+14	; 0x0e
 34c:	5f 85       	ldd	r21, Y+15	; 0x0f
 34e:	02 c0       	rjmp	.+4      	; 0x354 <__stack+0xf5>
 350:	4e 85       	ldd	r20, Y+14	; 0x0e
 352:	5f 85       	ldd	r21, Y+15	; 0x0f
								}
								
							while(!tst_bit(PINB,l));
 354:	26 b3       	in	r18, 0x16	; 22
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	28 23       	and	r18, r24
 35a:	39 23       	and	r19, r25
 35c:	23 2b       	or	r18, r19
 35e:	d1 f3       	breq	.-12     	; 0x354 <__stack+0xf5>
 360:	5f 87       	std	Y+15, r21	; 0x0f
 362:	4e 87       	std	Y+14, r20	; 0x0e
 364:	2e 85       	ldd	r18, Y+14	; 0x0e
 366:	3f 85       	ldd	r19, Y+15	; 0x0f
 368:	2f 5f       	subi	r18, 0xFF	; 255
 36a:	3f 4f       	sbci	r19, 0xFF	; 255
 36c:	3f 87       	std	Y+15, r19	; 0x0f
 36e:	2e 87       	std	Y+14, r18	; 0x0e
 370:	34 e0       	ldi	r19, 0x04	; 4
 372:	c3 0e       	add	r12, r19
 374:	d1 1c       	adc	r13, r1
				{
				
				
					clr_bit(PORTB,j);
					_delay_ms(10);
					for(i=0;i<4;i++)
 376:	ec 14       	cp	r14, r12
 378:	fd 04       	cpc	r15, r13
 37a:	09 f0       	breq	.+2      	; 0x37e <__stack+0x11f>
 37c:	7b cf       	rjmp	.-266    	; 0x274 <__stack+0x15>
 37e:	0b 81       	ldd	r16, Y+3	; 0x03
 380:	1c 81       	ldd	r17, Y+4	; 0x04
						}
						l=0;
					
						t='r';
					}
					set_bit(PORTB,j);
 382:	88 b3       	in	r24, 0x18	; 24
 384:	69 81       	ldd	r22, Y+1	; 0x01
 386:	86 2b       	or	r24, r22
 388:	88 bb       	out	0x18, r24	; 24
 38a:	0f 5f       	subi	r16, 0xFF	; 255
 38c:	1f 4f       	sbci	r17, 0xFF	; 255
		
		
		
	while (f=='0')
			{
				for(j=0;j<4;j++)
 38e:	04 30       	cpi	r16, 0x04	; 4
 390:	11 05       	cpc	r17, r1
 392:	09 f0       	breq	.+2      	; 0x396 <__stack+0x137>
 394:	49 cf       	rjmp	.-366    	; 0x228 <main+0x7c>
		
		
		
		
		
	while (f=='0')
 396:	80 e3       	ldi	r24, 0x30	; 48
 398:	b8 16       	cp	r11, r24
 39a:	41 f0       	breq	.+16     	; 0x3ac <__stack+0x14d>
 39c:	03 2d       	mov	r16, r3
 39e:	0b c0       	rjmp	.+22     	; 0x3b6 <__stack+0x157>
							if ((t!='r')&(s[0]!='r')&(s[1]=='r')&(s[2]=='r')){
								s[1]=t;
								t='r';
								}
							while(!tst_bit(PINB,l));
							if ((t!='r')&(s[0]!='r')&(s[1]!='r')&(s[2]=='r'))
 3a0:	71 2c       	mov	r7, r1
								t='r';
								}
							while(!tst_bit(PINB,l));
							if ((t!='r')&(s[0]!='r')&(s[1]=='r')&(s[2]=='r')){
								s[1]=t;
								t='r';
 3a2:	0f 2e       	mov	r0, r31
 3a4:	f2 e7       	ldi	r31, 0x72	; 114
 3a6:	8f 2e       	mov	r8, r31
 3a8:	f0 2d       	mov	r31, r0
 3aa:	30 2e       	mov	r3, r16
while(1)
{
	s[0]='r';
	s[1]='r';
	s[2]='r';
	f='0';
 3ac:	bf 80       	ldd	r11, Y+7	; 0x07
 3ae:	e8 84       	ldd	r14, Y+8	; 0x08
 3b0:	f9 84       	ldd	r15, Y+9	; 0x09
 3b2:	87 01       	movw	r16, r14
 3b4:	39 cf       	rjmp	.-398    	; 0x228 <main+0x7c>
					set_bit(PORTB,j);
				}
			
			};
			
			if((s[0]==USER1[0])&&(s[1]==USER1[1])&&(s[2]==USER1[2]))
 3b6:	91 e4       	ldi	r25, 0x41	; 65
 3b8:	69 12       	cpse	r6, r25
 3ba:	08 c0       	rjmp	.+16     	; 0x3cc <__stack+0x16d>
 3bc:	02 34       	cpi	r16, 0x42	; 66
 3be:	09 f0       	breq	.+2      	; 0x3c2 <__stack+0x163>
 3c0:	50 c1       	rjmp	.+672    	; 0x662 <__FUSE_REGION_LENGTH__+0x262>
 3c2:	e3 e4       	ldi	r30, 0x43	; 67
 3c4:	9e 12       	cpse	r9, r30
 3c6:	4f c1       	rjmp	.+670    	; 0x666 <__FUSE_REGION_LENGTH__+0x266>
				fl='1';
 3c8:	11 e3       	ldi	r17, 0x31	; 49
 3ca:	14 c0       	rjmp	.+40     	; 0x3f4 <__stack+0x195>
			if((s[0]==USER2[0])&&(s[1]==USER2[1])&&(s[2]==USER2[2]))
 3cc:	f2 e4       	ldi	r31, 0x42	; 66
 3ce:	6f 12       	cpse	r6, r31
 3d0:	50 c1       	rjmp	.+672    	; 0x672 <__FUSE_REGION_LENGTH__+0x272>
 3d2:	03 34       	cpi	r16, 0x43	; 67
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <__stack+0x179>
 3d6:	49 c1       	rjmp	.+658    	; 0x66a <__FUSE_REGION_LENGTH__+0x26a>
 3d8:	24 e4       	ldi	r18, 0x44	; 68
 3da:	92 12       	cpse	r9, r18
 3dc:	48 c1       	rjmp	.+656    	; 0x66e <__FUSE_REGION_LENGTH__+0x26e>
				fl='2';
 3de:	12 e3       	ldi	r17, 0x32	; 50
 3e0:	09 c0       	rjmp	.+18     	; 0x3f4 <__stack+0x195>
			if((s[0]==USER3[0])&&(s[1]==USER3[1])&&(s[2]==USER3[2]))
 3e2:	04 34       	cpi	r16, 0x44	; 68
 3e4:	31 f4       	brne	.+12     	; 0x3f2 <__stack+0x193>
 3e6:	36 e4       	ldi	r19, 0x46	; 70
 3e8:	93 16       	cp	r9, r19
 3ea:	09 f4       	brne	.+2      	; 0x3ee <__stack+0x18f>
 3ec:	47 c1       	rjmp	.+654    	; 0x67c <__FUSE_REGION_LENGTH__+0x27c>
 3ee:	10 e3       	ldi	r17, 0x30	; 48
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <__stack+0x195>
 3f2:	10 e3       	ldi	r17, 0x30	; 48
				fl='3';
			if(fl=='0')
 3f4:	10 33       	cpi	r17, 0x30	; 48
 3f6:	41 f4       	brne	.+16     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
				{
					lcd_gotoxy(0,1);
 3f8:	6d 85       	ldd	r22, Y+13	; 0x0d
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	7c de       	rcall	.-776    	; 0xf6 <lcd_gotoxy>
					lcd_puts("login invalido");
 3fe:	87 e6       	ldi	r24, 0x67	; 103
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	96 de       	rcall	.-724    	; 0x130 <lcd_puts>
 404:	bf 82       	std	Y+7, r11	; 0x07
 406:	07 cf       	rjmp	.-498    	; 0x216 <main+0x6a>
				}
				
			
	 };
	 
	lcd_clrscr();
 408:	7e de       	rcall	.-772    	; 0x106 <lcd_clrscr>
	lcd_puts("senha:");
 40a:	86 e7       	ldi	r24, 0x76	; 118
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	90 de       	rcall	.-736    	; 0x130 <lcd_puts>
	if(fl=='1'){sh[0]=USER1[3];sh[1]=USER1[4];sh[2]=USER1[5];}
 410:	11 33       	cpi	r17, 0x31	; 49
 412:	59 f0       	breq	.+22     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
	if(fl=='2'){sh[0]=USER2[3];sh[1]=USER2[4];sh[2]=USER2[5];}
 414:	12 33       	cpi	r17, 0x32	; 50
 416:	81 f0       	breq	.+32     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
	if(fl=='3'){
 418:	13 33       	cpi	r17, 0x33	; 51
 41a:	a1 f4       	brne	.+40     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
		sh[0]=USER3[3];
		sh[1]=USER3[4];
		sh[2]=USER3[5];}
 41c:	65 e3       	ldi	r22, 0x35	; 53
 41e:	6b 87       	std	Y+11, r22	; 0x0b
	lcd_puts("senha:");
	if(fl=='1'){sh[0]=USER1[3];sh[1]=USER1[4];sh[2]=USER1[5];}
	if(fl=='2'){sh[0]=USER2[3];sh[1]=USER2[4];sh[2]=USER2[5];}
	if(fl=='3'){
		sh[0]=USER3[3];
		sh[1]=USER3[4];
 420:	84 e3       	ldi	r24, 0x34	; 52
 422:	8c 87       	std	Y+12, r24	; 0x0c
	lcd_clrscr();
	lcd_puts("senha:");
	if(fl=='1'){sh[0]=USER1[3];sh[1]=USER1[4];sh[2]=USER1[5];}
	if(fl=='2'){sh[0]=USER2[3];sh[1]=USER2[4];sh[2]=USER2[5];}
	if(fl=='3'){
		sh[0]=USER3[3];
 424:	93 e3       	ldi	r25, 0x33	; 51
 426:	9a 87       	std	Y+10, r25	; 0x0a
 428:	0d c0       	rjmp	.+26     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
			
	 };
	 
	lcd_clrscr();
	lcd_puts("senha:");
	if(fl=='1'){sh[0]=USER1[3];sh[1]=USER1[4];sh[2]=USER1[5];}
 42a:	e3 e3       	ldi	r30, 0x33	; 51
 42c:	eb 87       	std	Y+11, r30	; 0x0b
 42e:	f2 e3       	ldi	r31, 0x32	; 50
 430:	fc 87       	std	Y+12, r31	; 0x0c
 432:	21 e3       	ldi	r18, 0x31	; 49
 434:	2a 87       	std	Y+10, r18	; 0x0a
 436:	06 c0       	rjmp	.+12     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
	if(fl=='2'){sh[0]=USER2[3];sh[1]=USER2[4];sh[2]=USER2[5];}
 438:	34 e3       	ldi	r19, 0x34	; 52
 43a:	3b 87       	std	Y+11, r19	; 0x0b
 43c:	63 e3       	ldi	r22, 0x33	; 51
 43e:	6c 87       	std	Y+12, r22	; 0x0c
 440:	82 e3       	ldi	r24, 0x32	; 50
 442:	8a 87       	std	Y+10, r24	; 0x0a
		sh[0]=USER3[3];
		sh[1]=USER3[4];
		sh[2]=USER3[5];}
	s[0]='r';
	s[1]='r';
	s[2]='r';
 444:	02 e7       	ldi	r16, 0x72	; 114
	if(fl=='3'){
		sh[0]=USER3[3];
		sh[1]=USER3[4];
		sh[2]=USER3[5];}
	s[0]='r';
	s[1]='r';
 446:	0f 2e       	mov	r0, r31
 448:	f2 e7       	ldi	r31, 0x72	; 114
 44a:	9f 2e       	mov	r9, r31
 44c:	f0 2d       	mov	r31, r0
	if(fl=='2'){sh[0]=USER2[3];sh[1]=USER2[4];sh[2]=USER2[5];}
	if(fl=='3'){
		sh[0]=USER3[3];
		sh[1]=USER3[4];
		sh[2]=USER3[5];}
	s[0]='r';
 44e:	92 e7       	ldi	r25, 0x72	; 114
 450:	99 83       	std	Y+1, r25	; 0x01
						if ((t!='r')&(s[0]!='r')&(s[1]=='r')&(s[2]=='r')){
							s[1]=t;
							t='r';
						}
						while(!tst_bit(PINB,l));
						if ((t!='r')&(s[0]!='r')&(s[1]!='r')&(s[2]=='r'))
 452:	31 2c       	mov	r3, r1
 454:	79 2c       	mov	r7, r9
 456:	0b 83       	std	Y+3, r16	; 0x03
 458:	61 2e       	mov	r6, r17
 45a:	bb c0       	rjmp	.+374    	; 0x5d2 <__FUSE_REGION_LENGTH__+0x1d2>
		{
			for(j=0;j<4;j++)
			{
				
				
				clr_bit(PORTB,j);
 45c:	88 b3       	in	r24, 0x18	; 24
 45e:	42 01       	movw	r8, r4
 460:	00 2e       	mov	r0, r16
 462:	02 c0       	rjmp	.+4      	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
 464:	88 0c       	add	r8, r8
 466:	99 1c       	adc	r9, r9
 468:	0a 94       	dec	r0
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
 46c:	98 2d       	mov	r25, r8
 46e:	90 95       	com	r25
 470:	89 23       	and	r24, r25
 472:	88 bb       	out	0x18, r24	; 24
 474:	e3 ec       	ldi	r30, 0xC3	; 195
 476:	f9 e0       	ldi	r31, 0x09	; 9
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
 47e:	00 00       	nop
 480:	98 01       	movw	r18, r16
 482:	26 5d       	subi	r18, 0xD6	; 214
 484:	3f 4f       	sbci	r19, 0xFF	; 255
 486:	79 01       	movw	r14, r18
 488:	c8 01       	movw	r24, r16
 48a:	86 5c       	subi	r24, 0xC6	; 198
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	6c 01       	movw	r12, r24
 490:	68 94       	set
 492:	aa 24       	eor	r10, r10
 494:	a2 f8       	bld	r10, 2
 496:	b1 2c       	mov	r11, r1
 498:	bf 86       	std	Y+15, r11	; 0x0f
 49a:	ae 86       	std	Y+14, r10	; 0x0e
				_delay_ms(10);
				for(i=0;i<4;i++)
				{
					l=i+4;
					if(!tst_bit(PINB,l))
 49c:	86 b3       	in	r24, 0x16	; 22
 49e:	ae 84       	ldd	r10, Y+14	; 0x0e
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0a 2c       	mov	r0, r10
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
 4a6:	95 95       	asr	r25
 4a8:	87 95       	ror	r24
 4aa:	0a 94       	dec	r0
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
 4ae:	80 fd       	sbrc	r24, 0
 4b0:	77 c0       	rjmp	.+238    	; 0x5a0 <__FUSE_REGION_LENGTH__+0x1a0>
					{
						t = pgm_read_byte(&teclado[i][j]);
 4b2:	f7 01       	movw	r30, r14
 4b4:	b4 90       	lpm	r11, Z
						lcd_putc(t);
 4b6:	8b 2d       	mov	r24, r11
 4b8:	29 de       	rcall	.-942    	; 0x10c <lcd_putc>
						if ((t!='r')&(s[0]=='r')){
 4ba:	82 2d       	mov	r24, r2
 4bc:	f2 e7       	ldi	r31, 0x72	; 114
 4be:	bf 12       	cpse	r11, r31
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
 4c2:	83 2d       	mov	r24, r3
 4c4:	88 23       	and	r24, r24
 4c6:	61 f0       	breq	.+24     	; 0x4e0 <__FUSE_REGION_LENGTH__+0xe0>
 4c8:	82 2d       	mov	r24, r2
 4ca:	29 81       	ldd	r18, Y+1	; 0x01
 4cc:	22 37       	cpi	r18, 0x72	; 114
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
 4d0:	83 2d       	mov	r24, r3
 4d2:	88 23       	and	r24, r24
 4d4:	29 f0       	breq	.+10     	; 0x4e0 <__FUSE_REGION_LENGTH__+0xe0>
							s[0]=t;
 4d6:	b9 82       	std	Y+1, r11	; 0x01
							t='r';
 4d8:	0f 2e       	mov	r0, r31
 4da:	f2 e7       	ldi	r31, 0x72	; 114
 4dc:	bf 2e       	mov	r11, r31
 4de:	f0 2d       	mov	r31, r0
 4e0:	c2 01       	movw	r24, r4
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	aa 94       	dec	r10
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <__FUSE_REGION_LENGTH__+0xe4>
 4ec:	4e 85       	ldd	r20, Y+14	; 0x0e
 4ee:	5f 85       	ldd	r21, Y+15	; 0x0f
						}
						while(!tst_bit(PINB,l));
 4f0:	26 b3       	in	r18, 0x16	; 22
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	28 23       	and	r18, r24
 4f6:	39 23       	and	r19, r25
 4f8:	23 2b       	or	r18, r19
 4fa:	d1 f3       	breq	.-12     	; 0x4f0 <__FUSE_REGION_LENGTH__+0xf0>
 4fc:	5f 87       	std	Y+15, r21	; 0x0f
 4fe:	4e 87       	std	Y+14, r20	; 0x0e
						if ((t!='r')&(s[0]!='r')&(s[1]=='r')&(s[2]=='r')){
 500:	52 2d       	mov	r21, r2
 502:	39 81       	ldd	r19, Y+1	; 0x01
 504:	32 37       	cpi	r19, 0x72	; 114
 506:	09 f4       	brne	.+2      	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>
 508:	53 2d       	mov	r21, r3
 50a:	42 2d       	mov	r20, r2
 50c:	6b 81       	ldd	r22, Y+3	; 0x03
 50e:	62 37       	cpi	r22, 0x72	; 114
 510:	09 f0       	breq	.+2      	; 0x514 <__FUSE_REGION_LENGTH__+0x114>
 512:	43 2d       	mov	r20, r3
 514:	22 2d       	mov	r18, r2
 516:	e2 e7       	ldi	r30, 0x72	; 114
 518:	7e 12       	cpse	r7, r30
 51a:	23 2d       	mov	r18, r3
 51c:	34 2f       	mov	r19, r20
 51e:	32 23       	and	r19, r18
 520:	22 2d       	mov	r18, r2
 522:	f2 e7       	ldi	r31, 0x72	; 114
 524:	bf 12       	cpse	r11, r31
 526:	01 c0       	rjmp	.+2      	; 0x52a <__FUSE_REGION_LENGTH__+0x12a>
 528:	23 2d       	mov	r18, r3
 52a:	23 23       	and	r18, r19
 52c:	51 f0       	breq	.+20     	; 0x542 <__FUSE_REGION_LENGTH__+0x142>
 52e:	55 23       	and	r21, r21
 530:	59 f0       	breq	.+22     	; 0x548 <__FUSE_REGION_LENGTH__+0x148>
							s[1]=t;
 532:	7b 2c       	mov	r7, r11
							t='r';
 534:	0f 2e       	mov	r0, r31
 536:	f2 e7       	ldi	r31, 0x72	; 114
 538:	bf 2e       	mov	r11, r31
 53a:	f0 2d       	mov	r31, r0
 53c:	6e 85       	ldd	r22, Y+14	; 0x0e
 53e:	7f 85       	ldd	r23, Y+15	; 0x0f
 540:	05 c0       	rjmp	.+10     	; 0x54c <__FUSE_REGION_LENGTH__+0x14c>
 542:	6e 85       	ldd	r22, Y+14	; 0x0e
 544:	7f 85       	ldd	r23, Y+15	; 0x0f
 546:	02 c0       	rjmp	.+4      	; 0x54c <__FUSE_REGION_LENGTH__+0x14c>
 548:	6e 85       	ldd	r22, Y+14	; 0x0e
 54a:	7f 85       	ldd	r23, Y+15	; 0x0f
						}
						while(!tst_bit(PINB,l));
 54c:	26 b3       	in	r18, 0x16	; 22
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	28 23       	and	r18, r24
 552:	39 23       	and	r19, r25
 554:	23 2b       	or	r18, r19
 556:	d1 f3       	breq	.-12     	; 0x54c <__FUSE_REGION_LENGTH__+0x14c>
 558:	7f 87       	std	Y+15, r23	; 0x0f
 55a:	6e 87       	std	Y+14, r22	; 0x0e
 55c:	45 23       	and	r20, r21
						if ((t!='r')&(s[0]!='r')&(s[1]!='r')&(s[2]=='r'))
 55e:	22 2d       	mov	r18, r2
 560:	32 e7       	ldi	r19, 0x72	; 114
 562:	b3 12       	cpse	r11, r19
 564:	01 c0       	rjmp	.+2      	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
 566:	23 2d       	mov	r18, r3
 568:	42 23       	and	r20, r18
 56a:	69 f0       	breq	.+26     	; 0x586 <__FUSE_REGION_LENGTH__+0x186>
 56c:	22 2d       	mov	r18, r2
 56e:	62 e7       	ldi	r22, 0x72	; 114
 570:	76 12       	cpse	r7, r22
 572:	01 c0       	rjmp	.+2      	; 0x576 <__FUSE_REGION_LENGTH__+0x176>
 574:	23 2d       	mov	r18, r3
 576:	22 23       	and	r18, r18
 578:	49 f0       	breq	.+18     	; 0x58c <__FUSE_REGION_LENGTH__+0x18c>
						{
							s[2]=t;
 57a:	bb 82       	std	Y+3, r11	; 0x03
							f='1';
 57c:	e1 e3       	ldi	r30, 0x31	; 49
 57e:	ef 83       	std	Y+7, r30	; 0x07
 580:	4e 85       	ldd	r20, Y+14	; 0x0e
 582:	5f 85       	ldd	r21, Y+15	; 0x0f
 584:	05 c0       	rjmp	.+10     	; 0x590 <__FUSE_REGION_LENGTH__+0x190>
 586:	4e 85       	ldd	r20, Y+14	; 0x0e
 588:	5f 85       	ldd	r21, Y+15	; 0x0f
 58a:	02 c0       	rjmp	.+4      	; 0x590 <__FUSE_REGION_LENGTH__+0x190>
 58c:	4e 85       	ldd	r20, Y+14	; 0x0e
 58e:	5f 85       	ldd	r21, Y+15	; 0x0f
						}
						
						while(!tst_bit(PINB,l));
 590:	26 b3       	in	r18, 0x16	; 22
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	28 23       	and	r18, r24
 596:	39 23       	and	r19, r25
 598:	23 2b       	or	r18, r19
 59a:	d1 f3       	breq	.-12     	; 0x590 <__FUSE_REGION_LENGTH__+0x190>
 59c:	5f 87       	std	Y+15, r21	; 0x0f
 59e:	4e 87       	std	Y+14, r20	; 0x0e
 5a0:	2e 85       	ldd	r18, Y+14	; 0x0e
 5a2:	3f 85       	ldd	r19, Y+15	; 0x0f
 5a4:	2f 5f       	subi	r18, 0xFF	; 255
 5a6:	3f 4f       	sbci	r19, 0xFF	; 255
 5a8:	3f 87       	std	Y+15, r19	; 0x0f
 5aa:	2e 87       	std	Y+14, r18	; 0x0e
 5ac:	34 e0       	ldi	r19, 0x04	; 4
 5ae:	e3 0e       	add	r14, r19
 5b0:	f1 1c       	adc	r15, r1
			{
				
				
				clr_bit(PORTB,j);
				_delay_ms(10);
				for(i=0;i<4;i++)
 5b2:	ce 14       	cp	r12, r14
 5b4:	df 04       	cpc	r13, r15
 5b6:	09 f0       	breq	.+2      	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
 5b8:	71 cf       	rjmp	.-286    	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
					}
					l=0;
					
					t='r';
				}
				set_bit(PORTB,j);
 5ba:	88 b3       	in	r24, 0x18	; 24
 5bc:	88 29       	or	r24, r8
 5be:	88 bb       	out	0x18, r24	; 24
 5c0:	0f 5f       	subi	r16, 0xFF	; 255
 5c2:	1f 4f       	sbci	r17, 0xFF	; 255
	s[2]='r';
	f='0';
		
		while (f=='0')
		{
			for(j=0;j<4;j++)
 5c4:	04 30       	cpi	r16, 0x04	; 4
 5c6:	11 05       	cpc	r17, r1
 5c8:	09 f0       	breq	.+2      	; 0x5cc <__FUSE_REGION_LENGTH__+0x1cc>
 5ca:	48 cf       	rjmp	.-368    	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
	s[0]='r';
	s[1]='r';
	s[2]='r';
	f='0';
		
		while (f=='0')
 5cc:	6f 81       	ldd	r22, Y+7	; 0x07
 5ce:	60 33       	cpi	r22, 0x30	; 48
 5d0:	29 f4       	brne	.+10     	; 0x5dc <__FUSE_REGION_LENGTH__+0x1dc>
			
	 };
	 
	lcd_clrscr();
	lcd_puts("senha:");
	if(fl=='1'){sh[0]=USER1[3];sh[1]=USER1[4];sh[2]=USER1[5];}
 5d2:	00 e0       	ldi	r16, 0x00	; 0
 5d4:	10 e0       	ldi	r17, 0x00	; 0
 5d6:	80 e3       	ldi	r24, 0x30	; 48
 5d8:	8f 83       	std	Y+7, r24	; 0x07
 5da:	40 cf       	rjmp	.-384    	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 5dc:	0b 81       	ldd	r16, Y+3	; 0x03
 5de:	16 2d       	mov	r17, r6
				set_bit(PORTB,j);
			}
			
		};
		
		lcd_clrscr();
 5e0:	92 dd       	rcall	.-1244   	; 0x106 <lcd_clrscr>
		if((s[0]==sh[0])&&(s[1]==sh[1])&&(s[2]==sh[2]))
 5e2:	9a 85       	ldd	r25, Y+10	; 0x0a
 5e4:	e9 81       	ldd	r30, Y+1	; 0x01
 5e6:	9e 13       	cpse	r25, r30
 5e8:	2e c0       	rjmp	.+92     	; 0x646 <__FUSE_REGION_LENGTH__+0x246>
 5ea:	fc 85       	ldd	r31, Y+12	; 0x0c
 5ec:	f7 11       	cpse	r31, r7
 5ee:	2b c0       	rjmp	.+86     	; 0x646 <__FUSE_REGION_LENGTH__+0x246>
 5f0:	2b 85       	ldd	r18, Y+11	; 0x0b
 5f2:	20 13       	cpse	r18, r16
 5f4:	28 c0       	rjmp	.+80     	; 0x646 <__FUSE_REGION_LENGTH__+0x246>
		{
			lcd_gotoxy(0,1);
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	7d dd       	rcall	.-1286   	; 0xf6 <lcd_gotoxy>
			switch (fl)
 5fc:	12 33       	cpi	r17, 0x32	; 50
 5fe:	41 f0       	breq	.+16     	; 0x610 <__FUSE_REGION_LENGTH__+0x210>
 600:	13 33       	cpi	r17, 0x33	; 51
 602:	51 f0       	breq	.+20     	; 0x618 <__FUSE_REGION_LENGTH__+0x218>
 604:	11 33       	cpi	r17, 0x31	; 49
 606:	59 f4       	brne	.+22     	; 0x61e <__FUSE_REGION_LENGTH__+0x21e>
			{
				case '1':
					lcd_puts("ola USER1");
 608:	8d e7       	ldi	r24, 0x7D	; 125
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	91 dd       	rcall	.-1246   	; 0x130 <lcd_puts>
					break;
 60e:	07 c0       	rjmp	.+14     	; 0x61e <__FUSE_REGION_LENGTH__+0x21e>
				case '2':
					lcd_puts("ola USER2");
 610:	87 e8       	ldi	r24, 0x87	; 135
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	8d dd       	rcall	.-1254   	; 0x130 <lcd_puts>
					break;
 616:	03 c0       	rjmp	.+6      	; 0x61e <__FUSE_REGION_LENGTH__+0x21e>
				case '3':
					lcd_puts("ola USER3");
 618:	81 e9       	ldi	r24, 0x91	; 145
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	89 dd       	rcall	.-1262   	; 0x130 <lcd_puts>
					break;
			}
			lcd_gotoxy(0,1);
 61e:	61 e0       	ldi	r22, 0x01	; 1
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	69 dd       	rcall	.-1326   	; 0xf6 <lcd_gotoxy>
			lcd_puts("Porta aberta");
 624:	8b e9       	ldi	r24, 0x9B	; 155
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	83 dd       	rcall	.-1274   	; 0x130 <lcd_puts>
			set_bit(PORTC,PC2);
 62a:	aa 9a       	sbi	0x15, 2	; 21
			set_bit(PORTC,PC1);
 62c:	a9 9a       	sbi	0x15, 1	; 21
			set_bit(PORTC,PC0);
 62e:	a8 9a       	sbi	0x15, 0	; 21
 630:	3f e3       	ldi	r19, 0x3F	; 63
 632:	62 e4       	ldi	r22, 0x42	; 66
 634:	8f e0       	ldi	r24, 0x0F	; 15
 636:	31 50       	subi	r19, 0x01	; 1
 638:	60 40       	sbci	r22, 0x00	; 0
 63a:	80 40       	sbci	r24, 0x00	; 0
 63c:	e1 f7       	brne	.-8      	; 0x636 <__FUSE_REGION_LENGTH__+0x236>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <__FUSE_REGION_LENGTH__+0x240>
 640:	00 00       	nop
			_delay_ms(5000);
			clr_bit(PORTC,PC2);
 642:	aa 98       	cbi	0x15, 2	; 21
 644:	0c c0       	rjmp	.+24     	; 0x65e <__FUSE_REGION_LENGTH__+0x25e>
		}
		
		else
		{
			lcd_puts("senha invalida");
 646:	88 ea       	ldi	r24, 0xA8	; 168
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	72 dd       	rcall	.-1308   	; 0x130 <lcd_puts>
 64c:	9f eb       	ldi	r25, 0xBF	; 191
 64e:	e7 e2       	ldi	r30, 0x27	; 39
 650:	f9 e0       	ldi	r31, 0x09	; 9
 652:	91 50       	subi	r25, 0x01	; 1
 654:	e0 40       	sbci	r30, 0x00	; 0
 656:	f0 40       	sbci	r31, 0x00	; 0
 658:	e1 f7       	brne	.-8      	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <__FUSE_REGION_LENGTH__+0x25c>
 65c:	00 00       	nop
			_delay_ms(3000);
		}
		lcd_clrscr();
 65e:	53 dd       	rcall	.-1370   	; 0x106 <lcd_clrscr>
	
	


};
 660:	cf cd       	rjmp	.-1122   	; 0x200 <main+0x54>
 662:	10 e3       	ldi	r17, 0x30	; 48
 664:	c7 ce       	rjmp	.-626    	; 0x3f4 <__stack+0x195>
 666:	10 e3       	ldi	r17, 0x30	; 48
 668:	c5 ce       	rjmp	.-630    	; 0x3f4 <__stack+0x195>
 66a:	10 e3       	ldi	r17, 0x30	; 48
 66c:	c3 ce       	rjmp	.-634    	; 0x3f4 <__stack+0x195>
 66e:	10 e3       	ldi	r17, 0x30	; 48
 670:	c1 ce       	rjmp	.-638    	; 0x3f4 <__stack+0x195>
			
			if((s[0]==USER1[0])&&(s[1]==USER1[1])&&(s[2]==USER1[2]))
				fl='1';
			if((s[0]==USER2[0])&&(s[1]==USER2[1])&&(s[2]==USER2[2]))
				fl='2';
			if((s[0]==USER3[0])&&(s[1]==USER3[1])&&(s[2]==USER3[2]))
 672:	23 e4       	ldi	r18, 0x43	; 67
 674:	62 16       	cp	r6, r18
 676:	09 f4       	brne	.+2      	; 0x67a <__FUSE_REGION_LENGTH__+0x27a>
 678:	b4 ce       	rjmp	.-664    	; 0x3e2 <__stack+0x183>
 67a:	be ce       	rjmp	.-644    	; 0x3f8 <__stack+0x199>
				}
				
			
	 };
	 
	lcd_clrscr();
 67c:	44 dd       	rcall	.-1400   	; 0x106 <lcd_clrscr>
	lcd_puts("senha:");
 67e:	86 e7       	ldi	r24, 0x76	; 118
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	56 dd       	rcall	.-1364   	; 0x130 <lcd_puts>
			if((s[0]==USER1[0])&&(s[1]==USER1[1])&&(s[2]==USER1[2]))
				fl='1';
			if((s[0]==USER2[0])&&(s[1]==USER2[1])&&(s[2]==USER2[2]))
				fl='2';
			if((s[0]==USER3[0])&&(s[1]==USER3[1])&&(s[2]==USER3[2]))
				fl='3';
 684:	13 e3       	ldi	r17, 0x33	; 51
 686:	c8 ce       	rjmp	.-624    	; 0x418 <__FUSE_REGION_LENGTH__+0x18>

00000688 <__vector_1>:
		
	return 0;
}

ISR(INT0_vect)
{
 688:	1f 92       	push	r1
 68a:	0f 92       	push	r0
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	0f 92       	push	r0
 690:	11 24       	eor	r1, r1
 692:	2f 93       	push	r18
 694:	3f 93       	push	r19
 696:	4f 93       	push	r20
 698:	5f 93       	push	r21
 69a:	6f 93       	push	r22
 69c:	7f 93       	push	r23
 69e:	8f 93       	push	r24
 6a0:	9f 93       	push	r25
 6a2:	af 93       	push	r26
 6a4:	bf 93       	push	r27
 6a6:	ef 93       	push	r30
 6a8:	ff 93       	push	r31
	lcd_clrscr();
 6aa:	2d dd       	rcall	.-1446   	; 0x106 <lcd_clrscr>
	lcd_puts("FOGO PORTA ABERTA");
 6ac:	87 eb       	ldi	r24, 0xB7	; 183
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	3f dd       	rcall	.-1410   	; 0x130 <lcd_puts>
	set_bit(PORTC,PC2);
 6b2:	aa 9a       	sbi	0x15, 2	; 21
	set_bit(PORTC,PC3);
 6b4:	ab 9a       	sbi	0x15, 3	; 21
 6b6:	2f e3       	ldi	r18, 0x3F	; 63
 6b8:	8d e0       	ldi	r24, 0x0D	; 13
 6ba:	93 e0       	ldi	r25, 0x03	; 3
 6bc:	21 50       	subi	r18, 0x01	; 1
 6be:	80 40       	sbci	r24, 0x00	; 0
 6c0:	90 40       	sbci	r25, 0x00	; 0
 6c2:	e1 f7       	brne	.-8      	; 0x6bc <__vector_1+0x34>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <__vector_1+0x3e>
 6c6:	00 00       	nop
	_delay_ms(1000);
	
	
}
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	bf 91       	pop	r27
 6ce:	af 91       	pop	r26
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	7f 91       	pop	r23
 6d6:	6f 91       	pop	r22
 6d8:	5f 91       	pop	r21
 6da:	4f 91       	pop	r20
 6dc:	3f 91       	pop	r19
 6de:	2f 91       	pop	r18
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
